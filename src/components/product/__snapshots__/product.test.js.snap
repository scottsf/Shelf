// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Product 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Product />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <img
          alt=""
          className="product__image"
        />,
        <div
          className="product__p"
        >
          <p>
            $
             
          </p>
          <p>
             
             
          </p>
        </div>,
        <div
          className="button"
        >
          <button
            className="button__delete btn"
            onClick={[Function]}
          >
             Delete 
          </button>
          <Link
            replace={false}
            to="/edit/undefined"
          >
            <button
              className="button__edit btn"
            >
               Edit 
            </button>
          </Link>
        </div>,
      ],
      "className": "product",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "alt": "",
          "className": "product__image",
          "src": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p>
              $
               
            </p>,
            <p>
               
               
            </p>,
          ],
          "className": "product__p",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "$",
                undefined,
                " ",
              ],
            },
            "ref": null,
            "rendered": Array [
              "$",
              undefined,
              " ",
            ],
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                " ",
                undefined,
                " ",
              ],
            },
            "ref": null,
            "rendered": Array [
              " ",
              undefined,
              " ",
            ],
            "type": "p",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="button__delete btn"
              onClick={[Function]}
            >
               Delete 
            </button>,
            <Link
              replace={false}
              to="/edit/undefined"
            >
              <button
                className="button__edit btn"
              >
                 Edit 
              </button>
            </Link>,
          ],
          "className": "button",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": " Delete ",
              "className": "button__delete btn",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": " Delete ",
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <button
                className="button__edit btn"
              >
                 Edit 
              </button>,
              "replace": false,
              "to": "/edit/undefined",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": " Edit ",
                "className": "button__edit btn",
              },
              "ref": null,
              "rendered": " Edit ",
              "type": "button",
            },
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <img
            alt=""
            className="product__image"
          />,
          <div
            className="product__p"
          >
            <p>
              $
               
            </p>
            <p>
               
               
            </p>
          </div>,
          <div
            className="button"
          >
            <button
              className="button__delete btn"
              onClick={[Function]}
            >
               Delete 
            </button>
            <Link
              replace={false}
              to="/edit/undefined"
            >
              <button
                className="button__edit btn"
              >
                 Edit 
              </button>
            </Link>
          </div>,
        ],
        "className": "product",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "",
            "className": "product__image",
            "src": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p>
                $
                 
              </p>,
              <p>
                 
                 
              </p>,
            ],
            "className": "product__p",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "$",
                  undefined,
                  " ",
                ],
              },
              "ref": null,
              "rendered": Array [
                "$",
                undefined,
                " ",
              ],
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  " ",
                  undefined,
                  " ",
                ],
              },
              "ref": null,
              "rendered": Array [
                " ",
                undefined,
                " ",
              ],
              "type": "p",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                className="button__delete btn"
                onClick={[Function]}
              >
                 Delete 
              </button>,
              <Link
                replace={false}
                to="/edit/undefined"
              >
                <button
                  className="button__edit btn"
                >
                   Edit 
                </button>
              </Link>,
            ],
            "className": "button",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": " Delete ",
                "className": "button__delete btn",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": " Delete ",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <button
                  className="button__edit btn"
                >
                   Edit 
                </button>,
                "replace": false,
                "to": "/edit/undefined",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": " Edit ",
                  "className": "button__edit btn",
                },
                "ref": null,
                "rendered": " Edit ",
                "type": "button",
              },
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
